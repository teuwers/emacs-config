* Startup
** Personalization
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message
      (concat
       ";; This buffer is for text that is not saved, and for Lisp evaluation.\n"
       ";; To create a file, visit it with C-x C-f and enter text in its buffer.\n"
       ";;\n"
       ";; __          __  _                            \n"
       ";; \\ \\        / / | |                           \n"
       ";;  \\ \\  /\\  / /__| | ___ ___  _ __ ___   ___   \n"
       ";;   \\ \\/  \\/ / _ \\ |/ __/ _ \\| '_ ` _ \\ / _ \\  \n"
       ";;    \\  /\\  /  __/ | (_| (_) | | | | | |  __/_ \n"
       ";;     \\/  \\/ \\___|_|\\___\\___/|_| |_| |_|\\___(_)\n"))

;; Leave this here, or package.el will just add it again.

#+END_SRC
** File limits
#+BEGIN_SRC emacs-lisp
(setq gc-cons-thresold 50000000)
(setq large-file-warning-thresold 100000000)
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC
** Configure use-package
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC
Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
;;(use-package auto-compile
;;  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)

#+END_SRC
* Global
** Key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

Remap when working in terminal Emacs.
#+BEGIN_SRC emacs-lisp
(define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC


Use M-/ for =company= completion.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

Use =C-c r= for =elfeed=
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c r") 'elfeed)
#+END_SRC

** Miscleneous
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

(global-auto-revert-mode t)
(add-hook 'before-save-hook 'whitespace-cleanup)

#+END_SRC
;;* Personal Information
;;#+BEGIN_SRC emacs-lisp
;;(setq user-full-name ""
;;      user-mail-address "")
;;#+END_SRC
* Visual configurations
** UI modifications
*** Title and menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(blink-cursor-mode -1)

(global-hl-line-mode +1)
(line-number-mode +1)
(global-display-line-numbers-mode +1)
(column-number-mode t)
(size-indication-mode t)

(setq inhibit-startup-screen t)

(setq frame-title-format
      '((:eval (if (buffer-file-name)
       (abbreviate-file-name (buffer-file-name))
       "%b"))))

(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)
;;(set-frame-font "Hack 12" nil t)
#+END_SRC
*** Theme
**** Main theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config))

#+END_SRC
**** Mode line
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC
*** Miscleneous preferences
**** Org syntax highlighting
#+BEGIN_SRC emacs-lisp
;;(setq org-src-fontify-natively t)
#+END_SRC
**** Highlight the current line
#+BEGIN_SRC emacsl-lisp
(global-hl-line-mode)
#+END_SRC

**** Agenda files
;;#+BEGIN_SRC emacs-lisp
;;(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
;;#+END_SRC
**** Org-mode TAB
Make TAB act as if it were issued in a buffer of the language’s major mode.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+END_SRC
* Editing
** Ease of use
*** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :config
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (show-paren-mode t)))

#+END_SRC
*** undo-tree
    Tree based undo management
#+BEGIN_SRC emacs-lisp
(use-package undo-tree)

#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4
          indent-tabs-mode nil)
#+END_SRC
** company
   Use company everywhere.
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (:map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  (global-company-mode t))
#+END_SRC
** magit
   Use magit for versin control. Tweak a few stuff like bring up statu with C-x g, use evil key bindings with magit and a few more changes.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :config
  (use-package evil-magit)
  (use-package with-editor)
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)

  (with-eval-after-load 'magit-remote
    (magit-define-popup-action 'magit-push-popup ?P
      'magit-push-implicitly--desc
      'magit-push-implicitly ?p t))

  (add-hook 'with-editor-mode-hook 'evil-insert-state))

#+END_SRC

Quickly page through the history of a file with git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC

** projectile and helm
   Projectile is a project manager that lets you easily switch between files in a project and seamlessly between projects as well. I use it with helm which I set up below.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :bind
  (("C-c p f" . helm-projectile-find-file)
   ("C-c p p" . helm-projectile-switch-project)
   ("C-c p s" . projectile-save-project-buffers))
  :config
  (projectile-mode +1)
)
#+END_SRC

It is a dwim fuzzy completion framework for Emacs and makes navigating Emacs a much nicer experience overall. I like to setup Helm to be a comfortable 20 pts in height and bind the most frequent Emacs commands like “M-x” with the helm equivalents.
#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer 2
  :bind
  ("M-x" . helm-M-x)
  ("C-x C-f" . helm-find-files)
  ("M-y" . helm-show-kill-ring)
  ("C-x b" . helm-mini)
  ("C-s" . helm-occur-from-isearch)
  :config
  (helm-mode 1)
  (setq helm-locate-fuzzy-match t)
  (setq helm-split-window-inside-p t
    helm-move-to-line-cycle-in-source t)
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  )

#+END_SRC

Combile projectile with helm to show project files through a helm fuzzy find interface
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :config
  (helm-projectile-on))

#+END_SRC
* Navigation configurations
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config (progn (global-set-key "\C-s" 'swiper)))

#+END_SRC
